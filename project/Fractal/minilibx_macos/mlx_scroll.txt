#include <mlx.h>

<===========================================================>

void	*mlx_init()

ОПИСАНИЕ
	Создает соединение со всеми функциями библиотеки.

ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ
	При удачном соединении с Х-сервером возвращется идентификатор соединения *void, иначе NULL.

<===========================================================>

void	*mlx_new_window(void *mlx_ptr, int size_x, int size_y, char *title)

ОПИСАНИЕ
	Создает новое окно на экране.

АРГУМЕНТЫ
	1. Идентификатор соединения (mlx_init)
	2. Размер окна по ширине (X).
	3. Размер окна по высоте (Y).
	4. Текст отображаемый в заголовке окна.

ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ
	При удачном создании окна возвращается идентификатор окна *void, иначе NULL.

<===========================================================>

int		mlx_clear_window(void *mlx_ptr, void *win_ptr)

ОПИСАНИЕ
	Очищает окно (заливка черным).

АРГУМЕНТЫ
	1. Идентификатор соединения (mlx_init).
	2. Идентификатор окна (mlx_new_window).

ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ
	Ничего не возвращает.

<===========================================================>

int		mlx_destroy_window(void *mlx_ptr, void *win_ptr)

ОПИСАНИЕ
	Удаляет окно.

АРГУМЕНТЫ
	1. Идентификатор соединения (mlx_init).
	2. Идентификатор окна (mlx_new_window).

ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ
	Ничего не возвращет.

<===========================================================>

int		mlx_pixel_put(void *mlx_ptr, void *win_ptr, int x, int y, int color)

ОПИСАНИЕ
	Рисует определенный пиксель в пределах окна. Координата 0,0 - верхний левый угол.

АРГУМЕНТЫ
	1. Идентификатор соединения (mlx_init).
	2. Идентификатор окна (mlx_new_window).
	3. Координата окна по ширине (X).
	4. Координата окна по высоте (Y).
	5. Цвет. На каждую букву ARGB приходиться по байту интовой переменной.

	буква		  A   |   R   |   G   |   B
	байт		0-255 | 0-255 | 0-255 | 0-255
	индекс		  3   |   2   |   1   |   0

ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ
	Ничего не возвращает.

<===========================================================>

int		mlx_string_put(void *mlx_ptr, void *win_ptr, int x, int y, int color, char *string)

ОПИСАНИЕ
	Отображает строку начиная с указанных координат. Координата 0,0 - верхний левый угол.

АРГУМЕНТЫ
	1. Идентификатор соединения (mlx_init).
	2. Идентификатор окна (mlx_new_window).
	3. Координата окна по ширине (X).
	4. Координата окна по высоте (Y).
	5. Цвет. На каждую букву ARGB приходиться по байту интовой переменной.
	6. Строка для отображения.

	буква		  A   |   R   |   G   |   B
	байт		0-255 | 0-255 | 0-255 | 0-255
	индекс		  3   |   2   |   1   |   0

ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ
	Ничего не возвращает.

<===========================================================>

void	*mlx_new_image(void *mlx_ptr, int width, int height)

ОПИСАНИЕ
	Создает новое изображение в памяти.

АРГУМЕНТЫ
	1. Идентификатор соединения.
	2. Ширина изображения.
	3. Высота изображения.

ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ
	Если все прошло хорошо вернет идентификатор изображения *void, иначе NULL.

<===========================================================>

void	*mlx_xpm_to_image(void *mlx_ptr, char **xpm_data, int *width, int *height)

ОПИСАНИЕ
	Создает новое изображение соответсвующее переданным аргументам.

АРГУМЕНТЫ
	1. Идентификатор соединения (mlx_init).
	2. Карта изображения.
	3. Ширина изображения.
	4. Высота изображения.

ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ
	Если все прошло хорошо вернет идентификатор изображения *void, иначе NULL.

<===========================================================>

void	*mlx_xpm_file_to_image(void *mlx_ptr, char *filename, int *width, int *height)

ОПИСАНИЕ
	Создает новое изображение соответсвующее переданным аргументам.

АРГУМЕНТЫ
	1. Идентификатор соединения (mlx_init).
	2. Имя файла содержащего карту изображения.
	3. Ширина изображения.
	4. Высота изображения.

ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ
	Если все прошло хорошо вернет идентификатор изображения *void, иначе NULL.

<===========================================================>

int		mlx_put_image_to_window(void *mlx_ptr, void *win_ptr, void *img_ptr, int x, int y)

ОПИСАНИЕ
	Выводит изображение на экран в пределах указанного окна, посволяет рисовать внутри него.

АРГУМЕНТЫ
	1. Идентификатор соединения (mlx_init).
	2. Идентификатор окна (mlx_new_window).
	3. Идентификатор изображения (mlx_put_image_to_window).
	4. Координата окна по ширине (X).
	5. Координата окна по высоте (Y).

ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ
	Ничего не возвращает.

<===========================================================>

char	*mlx_get_data_addr(void *img_ptr, int *bits_per_pixel, int *size_line, int *endian)

ОПИСАНИЕ
	Запоминает информацию об изображении, позволяя, тем самым, изменить изображение потом.

АРГУМЕНТЫ
	1. Идентификатор изображения (mlx_put_image_to_window).
	2. Количество битов, необходимых для представления цвета пикселя(глубина изображения).
	3. Количество байтов, используемых для хранения одной строки изображения в памяти.
	   (для перемещения с одной строки изображения на другую)
	4. В каком порядке байтов сохранять цвет пикселя(от меньшего байта == 0, от большего == 1)

ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ
	Информация о созданном изображении. Адрес *char представляет собой начало области памяти,
	в которой хранится изображение. Первые биты(bits_per_pixel) означают цвет первого пикселя
	в первой строке изображения. Вторая группа битов - цвет второго пикселя в первой строке
	и т.д. Добавив size_line к адресу вы получите начало второй строки.

<===========================================================>

int		mlx_destroy_image(void *mlx_ptr, void *img_ptr)

ОПИСАНИЕ
	Уничтожает изображение.

АРГУМЕНТЫ
	1. Идентификатор соединения (mlx_init).
	2. Идентификатор изображения (mlx_put_image_to_window).

ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ
	Ничего не возвращает.

<===========================================================>

unsigned int	mlx_get_color_value(void *mlx_ptr, int color)

ОПИСАНИЕ
	Преобразует хранение цвета пикселя в соответствии с требованиями bit_per_pixel,
	для понимания цвета XServerом.

АРГУМЕНТЫ
	1. Идентификатор соединения (mlx_init).
	2. Цвет пикселя.

ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ
	Значение типа unsigned int.

<===========================================================>

int		mlx_loop(void *mlx_ptr)

ОПИСАНИЕ
	Используется для получения событий от клавиатуры/мыши.

АРГУМЕНТЫ
	1.	Идентификатор соединения (mlx_init).

ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ
	Ничего не возвращает.

<===========================================================>

int		mlx_key_hook(void *win_ptr, int (*funct_ptr)(), void *param)
int		mlx_mouse_hook(void *win_ptr, int (*funct_ptr)(), void *param)
int		mlx_expose_hook(void *win_ptr, int (*funct_ptr)(), void *param)

ОПИСАНИЕ
	Отлавливает события в указаном окне, при пойманом событии обращается к указанной функции.

АРГУМЕНТЫ
	1. Идентификатор окна (mlx_new_window).
	2. Указатель на функцию, которую вы хотите вызвать, когда происходит событие.
	   (функция пишется по шаблону в зависмости от обрабатываемого хука)
	3. Параметр, который вы хотите передать в вызываемую функцию.

ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ
	Ничего не возвращает.

<===========================================================>

int		mlx_loop_hook(void *mlx_ptr, int (*funct_ptr)(), void *param)

ОПИСАНИЕ
	Отлавливает события в указаном окне, вызывается когда событие не поймано.

АРГУМЕНТЫ
	1. Идентификатор окна (mlx_new_window).
	2. Указатель на функцию, которую вы хотите вызвать, когда происходит событие.
	   (функция пишется по шаблону в зависмости от обрабатываемого хука)
	3. Параметр, который вы хотите передать в вызываемую функцию.

ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ
	Ничего не возвращает.

<===========================================================>

int		mlx_hook(void *win_ptr, int x_event, int x_mask, int (*funct)(), void *param)

ОПИСАНИЕ
	Отлавливает события в указаном окне, при пойманом событии обращается к указанной функции.

АРГУМЕНТЫ
	1. Идентификатор окна (mlx_new_window).
	2. Номер события (2 - клавиатура, 4 - кнопка мыши и т.п.)
	3. Аргумент для работы с Linux(что как и почему хз), для MacOS не важен.
	4. Указатель на функцию, которую вы хотите вызвать, когда происходит событие.
	   (функция пишется по шаблону в зависмости от обрабатываемого хука)
	5. Параметр, который вы хотите передать в вызываемую функцию.

ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ
	Ничего не возвращает.

<===========================================================>

ШАБЛОНЫ ДЛЯ ХУКОВ
	При нажатии с клавиатуры	key_hook(int keycode,void *param);
	При нажатии мыши			mouse_hook(int button,int x,int y,void *param);

	keycode, button				принимают значение клавиши.
	x, y						координата нажатия.

Более подробно про вариации обработки нажатий по ссылке
https://forum.intra.42.fr/topics/19254/messages?page=1#93530
